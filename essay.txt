LINK: https://github.com/Reksa97/cybersecurity-project
Installation instructions:

FLAW 1 - SQL Injection:
Description:
It is possible to modify SQL-query so that the condition is always true and return all data.
How to fix:
Validate the SQL string



FLAW 2: Cross Site Scripting (XSS)
Description:
When a user (name: ted, password: ted) is signed in the broser redirects to a signup form for an event. The form asks for a name and an address and the inputs have no restrictions.
It is possible to enter data which contains html elements such as script tags with javascript code and everything will be saved to the database. 
On page /admin/signups you can see all signups which have been submitted. If someone has set their name or address to for example:

<script>alert('you have been hacked')</script>

and the admin/signups page is opened, the code block will run on the browser showing an alert box. This happens because the browser interprets the data as html element instead of just text.
This bug allows people to run arbitrary javascript on someone elses browser and 

How to fix:
The Thymeleaf template signups.html uses unescaped text for showing the data stored in database. If all "th:utext" mentions are changed to "th:text" the problem no longer exists.
The default text style "th:text" escapes the string correctly so that the browser interprets everything as plain text and it should be used for displaying data that could be user input to avoid cross site scripting.



FLAW 3: Broken Authentication
Description: 
The system allows weak passwords and uses default admin credentials (user: admin, password: admin) and it is possible to brute force the login endpoint which makes it possible to crack passwords relatively easily and get access to the system. 
All passwords are saved as plain text without any hashing which means that all credentials are compromised if the database gets broken into.

How to fix:
Brute forcing could be managed by adding a listener for failed login attempts which disables logins for user for a while if login has failed for example 5 times in a row.

Passwords should be hashed by changing SecurityConfiguration.java method configureGlobal code to
auth.userDetailsService(userDetailsService).passwordEncoder(new BCryptPasswordEncoder());

After this passwords will be hashed with bcrypt and then stored making it impossible to use the passwords in the database without first having to decode the crypted passwords.



FLAW 4: Sensitive Data Exposure
Description:
This application stores addresses which for some people can be quite sensitive data. The page /admin/signups lists all signups in the database and it should not be accessible by anyone else but admins. The passwords and addresses are saved as plain text without any hashing which makes all user credentials and addresses vulnerable if the database gets stolen.
The signup data is sent in plain text and the site uses basic insecure HTTP so it is possible to intercept the responses for the page /admin/signups and reveal all signup data.

The admin credentials are really basic (admin, admin) and because of brute forcing of the login page is allowed it is possible for someone to get access to the admin site. 

How to fix:

Passwords should be hashed by changing SecurityConfiguration.java method configureGlobal code to
auth.userDetailsService(userDetailsService).passwordEncoder(new BCryptPasswordEncoder());

Addresses should also be hashed in database or at least when they are sent to the admin page a secure protocol such as HTTPS should be used.

The app does not have an account creation page but if it had, checks against using the worst and most common passwords could be implemented.

The admin password should be changed to a significantly more complex and secure one.


FLAW 5: Broken Access Control
Description:
This app uses access controls and the /admin pages should only be accessible by admins. In the security configuration /admin pages are correctly set only for users with authority ADMIN but in CustomUserDetailsService this authority is accidentally given to every authenticated user including ted. Currently all authenticated users can access the admin pages including the listing of signups which contains addresses.


How to fix:

In CustomUserDetailsService.java method loadUserByUsername the admin authority should only be given if the username is admin. 
This can be fixed by removing the "|| true" part from the last if block in the function.


Hours used for this project:
15.12. 2h
27.12. 4h
29.12. 2h